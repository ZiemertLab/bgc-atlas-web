extends layout

block content
    div.row.flex-fill.d-flex.justify-content-start(style=height="inherit;")
        div.col-md-12.text-center.bg-white.text-dark.top-level
            .row.top-level
                h1 #{GCF ? 'GCF ' + GCF : 'Loading...'}
                .row
                    .col-md-6
                        h2 Summary Statistics
                        div(style="display: flex; justify-content: center;")
                            table.table(style="font-size: 1.2em; font-weight: bold;")
                                tr
                                    td(style="text-align: left;") Total BGCs
                                    td(style="text-align: left;") :
                                    td(style="text-align: left;")
                                        span.badge.badge-primary#bgc-count Loading...
                                tr
                                    td(style="text-align: left;") Mean #BGC per sample
                                    td(style="text-align: left;") :
                                    td(style="text-align: left;")
                                        span.badge.badge-primary#meanbgcsamples Loading...
                    .col-md-6
                        h2 Biome Distribution
                        div#sunburst-chart Loading...
                .row
                    h2 Regions Summary
                    .col-md-6
                        canvas#category-chart Loading...
                    .col-md-6
                        canvas#product-chart
                .row
                    h2 Geographical Distribution
                    .col-md-12
                        div#map(style="height: 500px;")
                .row
                    h2 BGC Table
                    .col-md-12
                        table#bgcTable(style="width:100%;", class="stripe")


block append head
    // Stylesheets for DataTables and its extensions
    link(rel="stylesheet", href="https://cdn.datatables.net/1.13.4/css/jquery.dataTables.min.css")
    link(rel="stylesheet", href="https://cdn.datatables.net/searchbuilder/1.4.2/css/searchBuilder.bootstrap5.min.css")
    link(rel="stylesheet", href="https://cdn.datatables.net/datetime/1.4.1/css/dataTables.dateTime.min.css")
    link(rel="stylesheet", href="https://cdn.datatables.net/buttons/2.3.6/css/buttons.dataTables.min.css")

    // Stylesheets for Bootstrap and Leaflet
    link(rel='stylesheet', href='https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css')
    link(rel='stylesheet', href='https://unpkg.com/leaflet@1.9.3/dist/leaflet.css')
    link(rel='stylesheet', href='https://cdnjs.cloudflare.com/ajax/libs/leaflet.markercluster/1.5.3/MarkerCluster.Default.css')

    // Scripts for DataTables and its extensions
    script(src="https://cdn.datatables.net/1.13.4/js/jquery.dataTables.js")
    script(src="https://cdn.datatables.net/searchbuilder/1.4.2/js/dataTables.searchBuilder.min.js")
    script(src="https://cdn.datatables.net/plug-ins/1.13.7/api/fnSetFilteringDelay.js")
    script(src="https://cdn.datatables.net/searchbuilder/1.4.2/js/searchBuilder.bootstrap5.min.js")
    script(src="https://cdn.datatables.net/buttons/2.3.6/js/dataTables.buttons.min.js")
    script(src="https://cdnjs.cloudflare.com/ajax/libs/jszip/3.1.3/jszip.min.js")
    script(src="https://cdn.datatables.net/buttons/1.7.1/js/buttons.csv.min.js")
    script(src="https://cdn.datatables.net/buttons/1.7.1/js/buttons.html5.min.js")
    script(src="https://cdn.datatables.net/datetime/1.4.1/js/dataTables.dateTime.min.js")

    // Scripts for Chart.js, Leaflet, and Vega
    script(src='https://cdn.jsdelivr.net/npm/chart.js', sourcemaps="false")
    script(src='https://unpkg.com/leaflet@1.9.3/dist/leaflet.js')
    script(src='https://cdnjs.cloudflare.com/ajax/libs/leaflet.markercluster/1.5.3/leaflet.markercluster.js')
    script(src="https://cdn.jsdelivr.net/npm/vega@5.27.0")

    // Scripts for custom JavaScript
    script(src="/javascripts/sunburst.js")
    script(src="/javascripts/gcf_map.js")

    style.
        .top-level {
            padding: 50px;
        }
        .h1, h2, h3, h4, h5, h6 {
            padding-top: 20px
        }

        .putative-bgc {
            background-color: #ffcccb !important;
        }

block scripts
    script.
        function getInfo() {
            // Get the gcf query parameter from the URL
            const gcf = window.location.search.split('=')[1];

            // Include the gcf query parameter in the request URL
            const url = gcf ? `/bgc-info?gcf=${gcf}` : '/bgc-info';

            const xhr = new XMLHttpRequest();
            xhr.open('GET', url, true);
            xhr.responseType = 'json';

            xhr.onload = function () {
                if (xhr.status === 200) {
                    const results = xhr.response;
                    document.getElementById("bgc-count").innerHTML = Number(results[0].bgc_count).toLocaleString();
                    document.getElementById("meanbgcsamples").innerHTML = results[0].meanbgcsamples;

                    // Set the header text
                    const header = document.querySelector('h1'); // replace 'h1' with the selector for your header
                    header.innerHTML = gcf ? `GCF ${gcf}` : 'BGC Overview';
                }
            }
            xhr.send()
        }

        function plotProdChart() {
            // Get the gcf query parameter from the URL
            const gcf = window.location.search.split('=')[1];

            // Include the gcf query parameter in the request URL
            const url = gcf ? `/pc-product-count?gcf=${gcf}` : '/pc-product-count';

            const xhr = new XMLHttpRequest();
            xhr.open('GET', url, true);
            xhr.responseType = 'json';

            xhr.onload = function () {
                if (xhr.status === 200) {
                    const results = xhr.response;
                    const labels = results.map((row) => row.prod);
                    const data = results.map((row) => row.count);

                    console.log("labels: " + labels)

                    const canvas = document.getElementById('product-chart');
                    const ctx = canvas.getContext('2d');
                    ctx.clearRect(0, 0, canvas.width, canvas.height);

                    const chart = new Chart(ctx, {
                        type: 'bar',
                        data: {
                            labels: labels,
                            datasets: [
                                {
                                    label: 'Regions by Product',
                                    data: data,
                                    backgroundColor: 'rgba(54, 162, 235, 0.2)',
                                    borderColor: 'rgba(54, 162, 235, 1)',
                                    borderWidth: 1,
                                },
                            ],
                        },
                        options: {
                            scales: {
                                x: {
                                    ticks: {
                                        autoSkip: false,
                                    }
                                },
                                y: {
                                    beginAtZero: true
                                }
                            }

                        },
                    });
                }
            }
            xhr.send();
        }

        function plotChart() {
            // Get the gcf query parameter from the URL
            const gcf = window.location.search.split('=')[1];

            // Include the gcf query parameter in the request URL
            const url = gcf ? `/pc-category-count?gcf=${gcf}` : '/pc-category-count';

            const xhr = new XMLHttpRequest();
            xhr.open('GET', url, true);
            xhr.responseType = 'json';

            xhr.onload = function () {
                if (xhr.status === 200) {
                    const results = xhr.response;
                    const labels = results.map((row) => row.categories);
                    const data = results.map((row) => row.count);

                    console.log("labels: " + labels)

                    const canvas = document.getElementById('category-chart');
                    const ctx = canvas.getContext('2d');
                    ctx.clearRect(0, 0, canvas.width, canvas.height);

                    const chart = new Chart(ctx, {
                        type: 'bar',
                        data: {
                            labels: labels,
                            datasets: [
                                {
                                    label: 'Regions by Category',
                                    data: data,
                                    backgroundColor: 'rgba(54, 162, 235, 0.2)',
                                    borderColor: 'rgba(54, 162, 235, 1)',
                                    borderWidth: 1,
                                },
                            ],
                        },
                        options: {
                            scales: {
                                y: {
                                    beginAtZero: true
                                }
                            }
                        },
                    });
                }
            }
            xhr.send();
        }

        getInfo();
        plotChart();
        plotProdChart();
        createMapGCF();
        createSunburstView('#sunburst-chart')

        $(document).ready(function () {
            var table;
            table = $('#bgcTable').DataTable({
                "processing": true, // Enable processing indicator
                "serverSide": true, // Enable server-side processing
                "ajax": {
                    "url": '/bgc-table',
                    "data": function (d) {
                        const urlParams = new URLSearchParams(window.location.search);
                        const gcfVal = urlParams.get('gcf');
                        if (gcfVal) {
                            d.gcf = gcfVal; // Pass additional parameters to server
                        }
                    }
                },
                "lengthMenu": [[10, 25, 100, 500, 1000], [10, 25, 100, 500, 1000]],
                "pageLength": 10,
                "scrollCollapse": true,
                language: {
                    searchBuilder: {
                        button: 'Filter',
                    }
                },
                searchBuilder: {
                    searchOnChange: false,
                },
                buttons: [
                    'searchBuilder',
                    'csv',
                    {
                        text: 'JSON',
                        action: function ( e, dt, node, config ) {
                            downloadTableDataAsJson();
                        }
                    }
                ],
                "searching": false,
                dom: 'Bflriptip',
                columns: [
                    {data: 'region_id', name: 'BGC ID', title: 'BGC ID', type: 'num'},
                    {data: 'assembly', name: 'Assembly', title: 'Assembly', type: 'string'},
                    {data: 'product_categories', name: 'Category', title: 'Category', type: 'string'},
                    {data: 'products', name: 'Product', title: 'Product', type: 'string'},
                    {data: 'longest_biome', name: 'Biome', title: 'Biome', type: 'string'},
                    {data: null, name: 'Length', title: 'Length', type: 'num',
                        render: function (data, type, row) {
                            var length = row.end - row.start + 1;;
                            return length;
                        }
                    },
                    {data: 'bigslice_gcf_id', name: 'GCF', title: 'GCF', type: 'string'},
                    {data: 'membership_value', name: 'Membership Value', title: 'Membership Value', type: 'num',
                        render: function (data, type, row) {
                            // Ensure data is numeric and not null
                            if (type === 'display' && !isNaN(data) && data !== null) {
                                // Format the number to display only two decimal points
                                return parseFloat(data).toFixed(2);
                            }
                            return data;
                        }
                    },
                    {data: 'contig_edge', name: 'Contig Edge', title: 'Contig Edge', type: 'boolean'},
                    {data: 'contig_name', name: 'Contig', title: 'Contig', type: 'string'},
                    {data: 'region_num', name: 'Region#', title: 'Region#', type: 'string'},
                ],
                createdRow: function (row, data, dataIndex) {
                    if (data.region_id > 0) {
                        var rowNumCell = $(row).find('td').eq(0);
                        var rowNum = rowNumCell.html();
                        var paddedRowNum = rowNum.padStart(9, '0');
                        rowNumCell.html("BGC_" + paddedRowNum);
                        var biomeCell = $(row).find('td').eq(4);
                        biomeCell.html(biomeCell.html().replaceAll('root:', ''));
                        var assemblyCell = $(row).find('td').eq(1);
                        var assemblyID = assemblyCell.html();
                        assemblyCell.html('<a href="https://bgc-atlas.cs.uni-tuebingen.de/antismash?dataset=' + assemblyCell.html() + '" target="_blank">' + assemblyCell.html() + '</a>');

                        // assemblyCell.html('<a href="https://bgc-atlas.ziemertlab.com/datasets/' + assemblyCell.html() + '/antismash/index.html" target="_blank">' + assemblyCell.html() + '</a>');
                        var bgcCell = $(row).find('td').eq(0);
                        bgcCell.html('<a href="https://bgc-atlas.cs.uni-tuebingen.de/antismash?dataset=' + assemblyID + '&anchor=' + data.anchor + '" target="_blank">' + bgcCell.html() + '</a>');

                        //bgcCell.html('<a href="https://bgc-atlas.ziemertlab.com/datasets/' + data.assembly + '/antismash/index.html#' + data.anchor + '" target="_blank">' + bgcCell.html() + '</a>');
                        var gcfCell = $(row).find('td').eq(6);
                        gcfCell.html('<a href="/bgcs?gcf=' + gcfCell.html() + '" target="_blank">' + gcfCell.html() + '</a>');
                    }
                },
                rowCallback: function(row,data) {
                    if(parseFloat(data.membership_value) > 0.405) {
                        $(row).addClass('putative-bgc');
                    }
                },
                deferRender: true
            });
        });

        function downloadTableDataAsJson() {
            var data = [];
            $('#bgcTable').DataTable().rows().every(function() {
                var row = $(this.node());
                var rowData = {};
                row.find('td').each(function(index) {
                    var cell = $(this);
                    var cellData = cell.text(); // Get the cell text
                    var headerText = $('#bgcTable').DataTable().column(index).header().innerText;
                    rowData[headerText] = cellData;
                    // If the cell contains a hyperlink, extract the href value
                    var href = cell.find('a').attr('href');
                    if (href && href.startsWith('https')) {
                        rowData[headerText + ' Link'] = href; // Add a new key-value pair for the href
                    }
                });
                data.push(rowData);
            });

            // Convert the data to a JSON string
            var json = JSON.stringify(data, null, 2);

            // Create a blob from the JSON string
            var blob = new Blob([json], {type: "application/json"});

            // Create a link to download the blob
            var url = URL.createObjectURL(blob);
            var a = document.createElement('a');
            a.href = url;

            // Determine the filename based on the gcf value
            var params = new URLSearchParams(window.location.search);
            var gcf = params.get('gcf');
            var filename = gcf ? 'GCF_' + gcf + '.json' : 'all_bgcs.json';
            a.download = filename;

            a.click();
        }
