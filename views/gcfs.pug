extends layout

block content
    div.row.flex-fill.d-flex.justify-content-start(style=height="inherit;")
        div.col-md-12.text-center.bg-white.text-dark.top-level
            .row.top-level
                .row
                    table#gcfTable(style="width:100%;", class="stripe")
                //.row
                //    div#legend-container
            .row.top-level
                .row
                    p#gcf-count Loading...
                    p#mean-gcf
                .row
                    .col-md-6
                        canvas#gcf-count-hist-chart
                    .col-md-6
                        canvas#gcf-category-chart



block append head
    script(src='https://cdn.jsdelivr.net/npm/chart.js', sourcemaps="false")

    link(rel="stylesheet", href="https://cdn.datatables.net/1.13.4/css/jquery.dataTables.css")
    script(src="https://cdn.datatables.net/1.13.4/js/jquery.dataTables.js")

    link(rel="stylesheet", href="https://cdn.datatables.net/searchbuilder/1.4.2/css/searchBuilder.bootstrap5.min.css")
    link(rel="stylesheet", href="https://cdn.datatables.net/datetime/1.4.1/css/dataTables.dateTime.min.css")
    script(href="https://cdn.datatables.net/datetime/1.4.1/js/dataTables.dateTime.min.js")
    script(src="https://cdn.datatables.net/searchbuilder/1.4.2/js/dataTables.searchBuilder.min.js")
    script(src="https://cdn.datatables.net/searchbuilder/1.4.2/js/searchBuilder.bootstrap5.min.js")
    script(src="https://cdn.datatables.net/buttons/2.3.6/js/dataTables.buttons.min.js")
    link(rel="stylesheet", href="https://cdn.datatables.net/buttons/2.3.6/css/buttons.dataTables.min.css")
    link(rel="stylesheet", href="https://cdn.datatables.net/1.13.4/css/jquery.dataTables.min.css")
    script(src='https://cdn.jsdelivr.net/npm/chart.js')
    script(src='https://d3js.org/d3.v6.min.js')

    style.
        .top-level {
            padding: 50px;
        }

        /* Center the text in the table headers */
        #gcfTable th {
            text-align: center;
        }

        #legend-container {
            margin-top: 20px;
            display: flex;
            flex-wrap: wrap;
        }

        #legend-container div {
            margin-right: 15px;
            margin-bottom: 10px;
        }

        .info-icon {
            cursor: pointer;
            font-size: 12px;
            color: #007bff;
            margin-left: 5px;
        }

        .info-icon:hover {
            color: #0056b3;
        }


block scripts
    script.
        function getInfo() {
            const xhr = new XMLHttpRequest();
            xhr.open('GET', '/bgc-info', true);
            xhr.responseType = 'json';

            xhr.onload = function () {
                if (xhr.status === 200) {
                    const results = xhr.response;
                    document.getElementById("gcf-count").innerHTML = "Total GCFs: " + results[0].gcf_count;
                    document.getElementById("mean-gcf").innerHTML = "Mean #BGC per GCF: " + results[0].meanbgc;
                }
            }
            xhr.send()
        }

        function plotGCFChart() {
            const xhr = new XMLHttpRequest();
            xhr.open('GET', '/gcf-category-count', true);
            xhr.responseType = 'json';

            xhr.onload = function () {
                if (xhr.status === 200) {
                    const results = xhr.response;
                    const labels = results.map((row) => row.bgc_type);
                    const data = results.map((row) => row.unique_families);

                    console.log("labels: " + labels)

                    const canvas = document.getElementById('gcf-category-chart');
                    const ctx = canvas.getContext('2d');
                    ctx.clearRect(0, 0, canvas.width, canvas.height);

                    const chart = new Chart(ctx, {
                        type: 'bar',
                        data: {
                            labels: labels,
                            datasets: [
                                {
                                    label: 'GCFs by Category',
                                    data: data,
                                    backgroundColor: 'rgba(54, 162, 235, 0.2)',
                                    borderColor: 'rgba(54, 162, 235, 1)',
                                    borderWidth: 1,
                                },
                            ],
                        },
                        options: {
                            scales: {
                                y: {
                                    beginAtZero: true
                                }
                            }
                        },
                    });
                }
            }
            xhr.send();
        }

        function plotGCFCountHist() {
            const xhr = new XMLHttpRequest();

            xhr.open('GET', '/gcf-count-hist', true);
            xhr.responseType = 'json';

            xhr.onload = function () {
                if (xhr.status === 200) {
                    const results = xhr.response;
                    const labels = results.map((row) => row.bucket_range);
                    const data = results.map((row) => row.count_in_bucket);

                    console.log("labels: " + labels)

                    const canvas = document.getElementById('gcf-count-hist-chart');
                    const ctx = canvas.getContext('2d');
                    ctx.clearRect(0, 0, canvas.width, canvas.height);

                    const chart = new Chart(ctx, {
                        type: 'bar',
                        data: {
                            labels: labels,
                            datasets: [
                                {
                                    label: 'Histogram of BGC counts per GCF',
                                    data: data,
                                    backgroundColor: 'rgba(54, 162, 235, 0.2)',
                                    borderColor: 'rgba(54, 162, 235, 1)',
                                    borderWidth: 1,
                                },
                            ],
                        },
                        options: {
                            scales: {
                                x: {
                                    ticks: {
                                        autoSkip: false,
                                    }
                                },
                                y: {
                                    type: 'logarithmic',
                                    beginAtZero: true
                                }
                            }

                        },
                    });
                }
            }
            xhr.send();
        }

        getInfo();
        plotGCFChart();
        plotGCFCountHist();

        let legendLabels = new Set();

        // Function to map a label to a consistent color
        function getColorForLabel(label) {
            let hash = 0;
            for (let i = 0; i < label.length; i++) {
                hash = label.charCodeAt(i) + ((hash << 5) - hash);
            }

            // Generate a color from the hash
            const r = (hash >> 24) & 255;
            const g = (hash >> 16) & 255;
            const b = (hash >> 8) & 255;

            return `rgb(${Math.abs(r)}, ${Math.abs(g)}, ${Math.abs(b)})`;
        }

        function addToLegend(labels) {
            const legendContainer = document.getElementById('legend-container');

            // Add only new labels to the global legend tracker
            labels.forEach(label => {
                if (!legendLabels[label]) {
                    legendLabels[label] = getColorForLabel(label); // Add label to global legend tracker

                    // Create a new legend item
                    const legendItem = document.createElement('div');
                    legendItem.innerHTML = `
                        <div style="display: flex; align-items: center;">
                            <div style="width: 20px; height: 20px; background-color: ${legendLabels[label]}; margin-right: 10px;"></div>
                            <span>${label}</span>
                        </div>
                    `;
                    legendContainer.appendChild(legendItem);
                }
            });
        }

        // Function to clear the legend and reset global labels
        function clearLegend() {
            console.log("clearing legend");
            const legendContainer = document.getElementById('legend-container');
            legendContainer.innerHTML = '';  // Clear the legend DOM
            legendLabels.clear();  // Clear the Set to reset the global legendLabels
        }

        function buildHierarchy(labels, counts) {
            const root = {name: "root", children: []};

            labels.forEach((label, index) => {
                const parts = label.split(':');
                let currentLevel = root;

                parts.forEach((part, i) => {
                    let existingNode = currentLevel.children.find(node => node.name === part);

                    if (!existingNode) {
                        existingNode = {name: part, children: []};
                        currentLevel.children.push(existingNode);
                    }

                    if (i === parts.length - 1) {
                        existingNode.value = counts[index]; // Add the count at the last level
                    }

                    currentLevel = existingNode;
                });
            });

            return root;
        }


        function createPieChart(canvasId, labels, counts, percentages) {
            const canvas = document.createElement('canvas');
            canvas.id = canvasId;
            canvas.width = 100;
            canvas.height = 100;

            console.log(counts);
            console.log(labels);

            const data = buildHierarchy(labels, counts);



            setTimeout(() => {
                const ctx = document.getElementById(canvasId)?.getContext('2d');
                if (!ctx) {
                    console.error(`Canvas with ID ${canvasId} not found.`);
                    return;
                }
                new Chart(ctx, {
                    type: 'pie',
                    data: {
                        labels: labels, // Labels are needed for the tooltip
                        datasets: [{
                            data: percentages, // Percentages for pie chart distribution
                            backgroundColor: labels.map(label => getColorForLabel(label)), // Generate colors based on labels
                            borderColor: 'rgba(255, 255, 255, 1)',
                            borderWidth: 1
                        }]
                    },
                    options: {
                        responsive: true,
                        plugins: {
                            legend: {
                                display: false // Hide the legend labels
                            },
                            tooltip: {
                                displayColors: false, // Remove the color box
                                padding: 10, // Add padding inside the tooltip
                                bodyFont: {
                                    size: 12 // Increase the font size
                                },
                                callbacks: {
                                    // Custom label callback to wrap text and show count + percentage
                                    label: function (tooltipItem) {
                                        let label = labels[tooltipItem.dataIndex] || '';
                                        const count = counts[tooltipItem.dataIndex] || 0;
                                        const percentage = percentages[tooltipItem.dataIndex] || 0;

                                        label = label.replace(/:/g, ': ');

                                        // Split the label into lines if it's too long
                                        const maxLineLength = 30;
                                        let lines = [];
                                        let currentLine = '';

                                        label.split(' ').forEach(word => {
                                            if (currentLine.length + word.length > maxLineLength) {
                                                lines.push(currentLine);
                                                currentLine = word;
                                            } else {
                                                currentLine += (currentLine ? ' ' : '') + word;
                                            }
                                        });
                                        lines.push(currentLine); // Add the last line

                                        // Return wrapped label with count and percentage
                                        return [...lines, `Count: ${count}, Percentage: ${percentage}%`];
                                    },
                                    title: function () {
                                        return ''; // Remove the title
                                    }
                                },
                                // Ensure tooltips can overflow outside table cell
                                external: function (context) {
                                    const tooltip = context.tooltip;
                                    if (!tooltip) {
                                        return;
                                    }
                                    tooltip.display = true;
                                    tooltip.opacity = 1;
                                    tooltip.backgroundColor = 'rgba(0, 0, 0, 0.7)';
                                }
                            }
                        }
                    }
                });

                // addToLegend(labels);
            }, 0); // Ensure DOM rendering has occurred before drawing the chart

            return canvas.outerHTML;
        }

        $(document).ready(function () {
            let isTextView = false; // Flag to toggle between text and chart view

            $('#toggleViewButton').on('click', function () {
                console.log('Toggling view');
                isTextView = !isTextView; // Toggle the view state
                const buttonText = isTextView ? 'Switch to Pie Charts' : 'Switch to Text View';
                $(this).text(buttonText); // Update button text
                $('#gcfTable').DataTable().draw(); // Redraw the table with the updated view
            });

            // Initialize the DataTable
            var table = $('#gcfTable').DataTable({
                "ajax": '/gcf-table',
                "pageLength": 10,
                "paging": true, // Ensure paging is explicitly enabled
                "scrollCollapse": true,
                "autoWidth": false,
                "language": {
                    searchBuilder: {
                        button: 'Filter',
                    }
                },
                "dom": 'Bflriptip',
                "buttons": [
                    'searchBuilder'
                ],
                "columns": [
                    {data: 'gcf_id', name: 'GCF Family', title: 'GCF Family', type: 'int', width: '5%'},
                    {data: 'num_core_regions', name: '# Core BGCs', title: '# Core BGCs', type: 'num', width: '5%'},
                    {
                        data: 'core_products',
                        name: 'Types (Core)',
                        title: 'Types (Core)',
                        type: 'string',
                        width: '25%',
                        render: function (data, type, row) {
                            return type === 'display' ? data : data;
                        }
                    },
                    {
                        data: 'core_biomes',
                        name: 'Biomes (Core)',
                        title: 'Biomes (Core)',
                        type: 'string',
                        width: '17.5%',
                        render: function (data, type, row) {
                            if (type === 'display') {
                                if (isTextView) {
                                    // Return raw text when in text view
                                    return data;
                                } else {
                                    // Return pie chart when in chart view
                                    const canvasId = `biomes-pie-chart-${row.gcf_id}`;
                                    return `<div id="chart-container-${row.gcf_id}">
                                                                    <canvas id="${canvasId}" width="150" height="150"></canvas>
                                                                </div>`;
                                }
                            }
                            return data;
                        }
                    },
                    {data: 'num_all_regions', name: '# All BGCs', title: '# All BGCs', type: 'num', width: '5%'},
                    {
                        data: 'all_products',
                        name: 'Types (All)',
                        title: 'Types (All)',
                        type: 'string',
                        width: '25%',
                        render: function (data, type, row) {
                            return type === 'display' ? data : data;
                        }
                    },
                    {
                        data: 'all_biomes',
                        name: 'Biomes (All)',
                        title: 'Biomes (All)',
                        type: 'string',
                        width: '17.5%',
                        render: function (data, type, row) {
                            if (type === 'display') {
                                const canvasId = `biomes-all-pie-chart-${row.gcf_id}`;  // Unique ID for each chart
                                // Set the width and height of the canvas
                                return `<div id="chart-container-${row.gcf_id}">
                                                                <canvas id="${canvasId}" width="150" height="150"></canvas>
                                                            </div>`;
                            }
                            return data;
                        }
                    }

                ],
                "order": [[1, 'desc'], [0, 'desc']],
                "createdRow": function (row, data, dataIndex) {
                    if (data.num_core_regions > 0) {
                        var biomeCell = $(row).find('td').eq(3);
                        biomeCell.html(biomeCell.html().replaceAll('root:', ''));
                        var famNumCell = $(row).find('td').eq(0);
                        famNumCell.html('<a href="/bgcs?gcf=' + famNumCell.html() + '" target="_blank">' + famNumCell.html() + '</a>');
                    }
                },
                "initComplete": function (settings, json) {
                    console.log("DataTable initialized. Table object:", table); // Log the table object for debugging
                    appendCustomPaginationControls(table);
                },
                "drawCallback": function (settings) {
                    // Ensure table.page is available and valid before appending controls
                    if (table && typeof table.page === 'function') {
                        appendCustomPaginationControls(table);
                    } else {
                        console.error("DataTable page method is not available. Table object:", table); // Log the table object for further inspection
                    }

                    var api = this.api(); // Reference the DataTable API

                    // Apply the chart generation only to visible rows
                    var visibleRows = api.rows({page: 'current'}).nodes(); // Get visible rows

                    $(visibleRows).each(function () {
                        var $row = $(this);
                        var rowData = api.row(this).data();
                        var canvasId = `biomes-pie-chart-${rowData.gcf_id}`;

                        // Ensure the chart is not already rendered to avoid duplication
                        if (!$(`#${canvasId}`).hasClass('initialized')) {
                            const biomeData = rowData.core_biomes.split(',').map(item => {
                                const [biome, count] = item.trim().split(/\s*\(\s*|\s*\)\s*/);
                                return {label: biome, count: parseInt(count) || 0};
                            });

                            const totalCount = biomeData.reduce((acc, curr) => acc + curr.count, 0);
                            const percentages = biomeData.map(b => Math.round((b.count / totalCount) * 100));
                            const counts = biomeData.map(b => b.count);
                            const labels = biomeData.map(b => b.label);

                            // Render the chart
                            $(`#${canvasId}`).addClass('initialized');  // Mark the canvas as initialized
                            createPieChart(canvasId, labels, counts, percentages);
                        }

                        canvasId = `biomes-all-pie-chart-${rowData.gcf_id}`;

                        // Ensure the chart is not already rendered to avoid duplication
                        if (!$(`#${canvasId}`).hasClass('initialized')) {
                            const biomeData = rowData.all_biomes.split(',').map(item => {
                                const [biome, count] = item.trim().split(/\s*\(\s*|\s*\)\s*/);
                                return {label: biome, count: parseInt(count) || 0};
                            });

                            const totalCount = biomeData.reduce((acc, curr) => acc + curr.count, 0);
                            const percentages = biomeData.map(b => Math.round((b.count / totalCount) * 100));
                            const counts = biomeData.map(b => b.count);
                            const labels = biomeData.map(b => b.label);

                            // Render the chart
                            $(`#${canvasId}`).addClass('initialized');  // Mark the canvas as initialized
                            createPieChart(canvasId, labels, counts, percentages);
                        }
                    });
                },
                headerCallback: function (thead, data, start, end, display) {
                    $(thead).find('th').eq(0).html(`
                                                    GCF ID
                                                    <span class="info-icon" data-bs-toggle="tooltip" title="Unique identifier for the GCF. Clicking this opens the GCF viewer for this specific cluster.">
                                                        <img src="/images/info.svg" width="12" height="12" alt="Info" />
                                                    </span>
                                                `);
                    $(thead).find('th').eq(1).html(`
                                                    # Core BGCs
                                                    <span class="info-icon" data-bs-toggle="tooltip" title="Number of core BGCs in the GCF. Core BGCs are those that are annotated as complete by antiSMASH and used to construct the initial clustering of BGCs into GCFs.">
                                                        <img src="/images/info.svg" width="12" height="12" alt="Info" />
                                                    </span>
                                                `);
                    $(thead).find('th').eq(2).html(`
                                                    Types (Core)
                                                    <span class="info-icon" data-bs-toggle="tooltip" title="Types of core BGCs in the GCF. Core BGCs are those that are annotated as complete by antiSMASH and used to construct the initial clustering of BGCs into GCFs.">
                                                        <img src="/images/info.svg" width="12" height="12" alt="Info" />
                                                    </span>
                                                `);
                    $(thead).find('th').eq(3).html(`
                                                    Biomes (Core)
                                                    <span class="info-icon" data-bs-toggle="tooltip" title="Biomes where core BGCs are found. Core BGCs are those that are annotated as complete by antiSMASH and used to construct the initial clustering of BGCs into GCFs.">
                                                        <img src="/images/info.svg" width="12" height="12" alt="Info" />
                                                    </span>
                                                `);
                    $(thead).find('th').eq(4).html(`
                                                    # All BGCs
                                                    <span class="info-icon" data-bs-toggle="tooltip" title="Number of all BGCs in the GCF. All BGCs include both core and incomplete BGCs that are assigned to the GCF in the second step of the GCF clustering by using BiG-SLiCE's search function.">
                                                        <img src="/images/info.svg" width="12" height="12" alt="Info" />
                                                    </span>
                                                `);
                    $(thead).find('th').eq(5).html(`
                                                    Types (All)
                                                    <span class="info-icon" data-bs-toggle="tooltip" title="Types of all BGCs in the GCF. All BGCs include both core and incomplete BGCs that are assigned to the GCF in the second step of the GCF clustering by using BiG-SLiCE's search function.">
                                                        <img src="/images/info.svg" width="12" height="12" alt="Info" />
                                                    </span>
                                                `);
                    $(thead).find('th').eq(6).html(`
                                                    Biomes (All)
                                                    <span class="info-icon" data-bs-toggle="tooltip" title="Biomes where all BGCs are found. All BGCs include both core and incomplete BGCs that are assigned to the GCF in the second step of the GCF clustering by using BiG-SLiCE's search function.">
                                                        <img src="/images/info.svg" width="12" height="12" alt="Info" />
                                                    </span>
                                                `);

                }
            });

            $('#gcfTable').on('draw.dt', function () {
                $('[data-bs-toggle="tooltip"]').tooltip(); // Activate Bootstrap tooltips
            });

            // Function to append custom pagination controls (input box and Go button)
            function appendCustomPaginationControls(table) {
                // Check if the input and Go button already exist to avoid duplicates
                if (!$('#custom-page-input').length) {
                    $('#gcfTable_paginate').append(
                        '<div style="display: inline-flex; align-items: center; margin-left: 10px;">' +
                        '<input id="custom-page-input" type="text" placeholder="Page" style="width: 60px; text-align: center; margin-right: 5px;" />' +
                        '<button id="custom-page-go" class="btn btn-primary btn-sm" style="height: 30px;">Go</button>' +
                        '</div>'
                    );
                }

                // Check if table.page() is defined and valid before continuing
                if (typeof table.page === 'function') {
                    // Update the input box with the current page number
                    var currentPage = table.page.info().page + 1; // DataTables uses zero-based page index
                    $('#custom-page-input').val(currentPage);

                    // Re-bind the click event for the Go button after each redraw
                    $('#custom-page-go').off('click').on('click', function () {
                        goToPage(table);
                    });

                    // Handle the Enter key press to trigger the page change
                    $('#custom-page-input').off('keypress').on('keypress', function (e) {
                        if (e.which == 13) { // Enter key code is 13
                            goToPage(table);
                        }
                    });
                } else {
                    console.error("DataTable page method is not available.");
                }
            }

            // Function to go to the specified page
            function goToPage(table) {
                // Ensure table.page() is defined before using it
                if (typeof table.page === 'function') {
                    var pageNum = parseInt($('#custom-page-input').val(), 10);
                    var totalPages = table.page.info().pages;

                    if (!isNaN(pageNum) && pageNum > 0 && pageNum <= totalPages) {
                        table.page(pageNum - 1).draw('page');
                    } else {
                        alert('Invalid page number');
                    }
                } else {
                    console.error("DataTable page method is not available.");
                }
            }
        });
